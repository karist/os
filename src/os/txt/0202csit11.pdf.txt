International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 10.5121/ijcsit.2010.2211_CD 125_CD Wrapper_NNP Generator_NNP using_VBG Java_NNP Native_NNP Interface_NNP V.S.Vairale1_NNP and_CC K.N.Honwadkar2_NNP 1Department_NNP of_IN Computer_NNP Engineering_NNP ,_, AISSMS_NNP College_NNP of_IN Engineering_NNP ,_, Pune_NNP University_NNP ,_, Pune_NNP ,_, India_NNP vaishali_VBP .vairale@gmail.com_NNP 2Department_NNP of_IN Computer_NNP Engineering_NNP ,_, D.Y.Patil_NNP College_NNP of_IN Engineering_NNP ,_, Akurdi_NNP ,_, Pune_NNP University_NNP ,_, Pune_NNP ,_, India_NNP knhonwadkar@yahoo.co.in_VBD Abstract_NNP The_DT purpose_NN of_IN this_DT paper_NN is_VBZ to_TO provide_VB a_DT complete_JJ automated_JJ solution_NN to_TO the_DT wrapping_NN and_CC compilation_NN of_IN legacy_JJ code_NN in_IN order_NN to_TO facilitate_VB the_DT use_NN of_IN native_JJ libraries_NNS in_IN effective_JJ ways_NNS through_IN Java_NNP Native_NNP Interface_NNP ._. Legacy_NNP codes_NNS are_VBP those_DT libraries_NNS ,_, command_NN line_NN applications_NNS or_CC other_JJ types_NNS of_IN systems_NNS that_WDT were_VBD developed_VBN in_IN technologies_NNS older_JJR than_IN currently_RB used_VBN in_IN modern_JJ computing_NN environments_NNS ._. Modern_NNP software_NN engineering_NN concepts_NNS ,_, like_IN software_NN as_IN a_DT service_NN ,_, allow_VBP the_DT extension_NN of_IN the_DT legacy_NN code_NN lifetime_NN and_CC the_DT reduction_NN of_IN software_NN maintenance_NN costs_NNS ._. The_DT transformation_NN of_IN a_DT legacy_JJ code_NN into_IN a_DT service_NN is_VBZ not_RB straightforward_JJ task_NN ,_, especially_RB when_WRB the_DT initial_JJ code_NN was_VBD designed_VBN with_IN a_DT rich_JJ user_NN interface_NN ._. This_DT paper_NN describes_VBZ a_DT process_NN for_IN the_DT semi-automatic_JJ conversion_NN of_IN numerical_JJ and_CC scientific_JJ routines_NNS written_VBN in_IN the_DT C_NNP programming_NN language_NN into_IN computational_JJ services_NNS that_WDT can_MD be_VB used_VBN within_IN a_DT distributed_VBN service_NN -_: oriented_VBN architecture_NN such_JJ as_IN that_IN being_VBG adopted_VBN for_IN Grid_JJ computing_NN ._. Keywords_NNPS Legacy_NNP Code_NNP ,_, AWGNL_NNP ,_, C_NNP Wrapping_NNP ,_, JNI_NNP ,_, Data_NNP Mediation_NNP ,_, Wrapper_NNP Generator_NNP 1_CD ._. Introduction_NNP The_DT purpose_NN of_IN this_DT paper_NN is_VBZ to_TO provide_VB a_DT complete_JJ automated_JJ solution_NN to_TO the_DT wrapping_NN and_CC compilation_NN of_IN legacy_JJ code_NN ._. Java_NNP 's_POS object-oriented_JJ features_NNS ,_, platform_NN independence_NN ,_, and_CC numerous_JJ APIs_NN for_IN tasks_NNS such_JJ as_IN network_NN programming_NN ,_, XML_NNP processing_NN ,_, and_CC GUI_NNP building_NN ,_, make_VB it_PRP a_DT powerful_JJ and_CC increasingly_RB popular_JJ language_NN for_IN developing_VBG Grid-based_JJ e-Science_NN applications_NNS ._. However_RB ,_, the_DT task_NN of_IN manually_RB converting_VBG the_DT large_JJ body_NN of_IN existing_VBG high_JJ quality_NN ,_, validated_JJ code_NN to_TO Grid-enabled_JJ ,_, Java-based_JJ services_NNS is_VBZ both_DT daunting_JJ and_CC expensive_JJ ._. The_DT main_JJ aim_NN of_IN the_DT work_NN described_VBN is_VBZ to_TO make_VB this_DT conversion_NN task_NN as_IN automated_VBN as_IN possible_JJ in_IN order_NN to_TO facilitate_VB the_DT use_NN of_IN such_JJ services_NNS in_IN composing_VBG Grid-based_JJ scientific_JJ applications_NNS ._. Recently_RB ,_, Scientific_NNP and_CC Engineering_NNP communities_NNS are_VBP employing_VBG Grid_NNP enabled_VBD software_NN applications_NNS ._. To_TO be_VB widely_RB adopted_VBN ,_, Java_NNP applications_NNS in_IN particular_JJ will_MD require_VB more_JJR support_NN the_DT integration_NN of_IN legacy_NN applications_NNS ._. C_NNP and_CC C++_NNP programming_NN languages_NNS are_VBP used_VBN extensively_RB for_IN scientific_JJ applications_NNS and_CC consequently_RB ,_, the_DT requirement_NN for_IN a_DT method_NN to_TO incorporate_VB software_NN and_CC applications_NNS in_IN C_NNP or_CC C++_NNP is_VBZ of_IN prime_JJ importance_NN ._. Two_CD separate_JJ tools_NNS carry_VBP out_RP the_DT wrapping_NN and_CC data_NNS mapping_NN functions_NNS ._. The_DT Automatic_NNP Wrapper_NNP Generator_NNP for_IN Native_NNP Libraries_NNP (_-LRB- AWGNL_NN )_-RRB- tool_NN automatically_RB wraps_VBZ C_NNP routines_NNS as_IN Java_NNP code_NN using_VBG the_DT Java_NNP Native_NNP Interface_NNP (_-LRB- JNI)[_NNP 6]_CD ._. This_DT approach_NN can_MD be_VB applied_VBN to_TO individual_JJ C_NNP routines_NNS ,_, or_CC to_TO whole_JJ libraries_NNS ,_, and_CC is_VBZ based_VBN on_IN the_DT routine_JJ interfaces_NNS given_VBN in_IN the_DT C_NNP header_NN files_NNS ._. AWGNL_NN allows_VBZ users_NNS with_IN no_DT knowledge_NN of_IN JNI_NNP to_TO quickly_RB and_CC easily_RB build_VB a_DT Java_NNP wrapper_NN for_IN C_NNP routines_NNS ._. The_DT approach_NN taken_VBN is_VBZ similar_JJ to_TO that_DT in_IN the_DT Java-C_JJ Interface_NNP (JCI)_NNP ._. However_RB ,_, AWGNL_NNP extends_VBZ the_DT JCI_NNP functionality_NN to_TO deal_VB with_IN arrays_NNS of_IN structures_NNS ,_, and_CC provides_VBZ a_DT graphical_JJ user_NN interface_NN International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 126_CD through_IN which_WDT users_NNS can_MD wrap_VB legacy_JJ C_NNP libraries_NNS ._. Developing_NN new_JJ codes_NNS ,_, incrementing_VBG applications_NNS with_IN middleware_JJ specific_JJ interfaces_NNS ,_, or_CC designing_VBG applications_NNS to_TO explicitly_RB take_VB advantage_NN of_IN distributed_VBN resources_NNS is_VBZ a_DT significant_JJ burden_NN for_IN the_DT developers_NNS who_WP are_VBP often_RB reluctant_JJ to_TO allocate_VB sufficient_JJ effort_NN on_IN non_FW application_NN specific_JJ problems_NNS ._. The_DT middleware_NN is_VBZ therefore_RB expected_VBN to_TO ease_VB legacy_NN codes_NNS migration_NN to_TO service-oriented_JJ infrastructures_NNS by_IN proposing_VBG a_DT non-intrusive_JJ interface_NN to_TO existing_VBG legacy_NN codes_NNS ,_, and_CC optimizing_VBG the_DT execution_NN of_IN the_DT application_NN on_IN the_DT available_JJ resources_NNS ._. In_IN this_DT context_NN ,_, enabling_VBG legacy_JJ code_NN execution_NN on_IN service-oriented_JJ infrastructures_NNS is_VBZ a_DT high_JJ priority_NN challenge_NN ._. The_DT JNI_NNP is_VBZ used_VBN to_TO write_VB native_JJ methods_NNS to_TO handle_VB situations_NNS when_WRB an_DT application_NN cannot_MD be_VB written_VBN entirely_RB in_IN the_DT Java_NNP programming_NN language_NN such_JJ as_IN when_WRB the_DT standard_JJ Java_NNP class_NN library_NN does_VBZ not_RB support_VB the_DT platform-specific_JJ features_NNS or_CC program_NN library_NN ._. It_PRP is_VBZ also_RB used_VBN to_TO modify_VB an_DT existing_VBG application_NN ,_, written_VBN in_IN another_DT programming_NN language_NN ,_, to_TO be_VB accessible_JJ to_TO Java_NNP applications_NNS ._. Many_JJ of_IN the_DT standard_JJ library_NN classes_NNS depend_VBP on_IN the_DT JNI_NNP to_TO provide_VB functionality_NN to_TO the_DT developer_NN and_CC the_DT user_NN ,_, e.g_NN ._. I/O_'' file_NN reading_NN and_CC sound_NN capabilities_NNS ._. Including_NNP performance_NN -_: and_CC platform-sensitive_JJ API_NNP implementations_NNS in_IN the_DT standard_JJ library_NN allows_VBZ all_DT Java_NNP applications_NNS to_TO access_VB this_DT functionality_NN in_IN a_DT safe_JJ and_CC platform-independent_JJ manner_NN ._. Before_IN resorting_VBG to_TO using_VBG the_DT JNI_NNP ,_, developers_NNS should_MD make_VB sure_JJ the_DT functionality_NN is_VBZ not_RB already_RB provided_VBN in_IN the_DT standard_JJ libraries_NNS ._. This_DT document_NN describes_VBZ a_DT process_NN for_IN the_DT semi-automatic_JJ as_RB well_RB as_IN automatic_JJ conversion_NN of_IN numerical_JJ and_CC scientific_JJ routines_NNS written_VBN in_IN the_DT C_NNP or_CC C++_NNP programming_NN language_NN into_IN Java_NNP programming_NN language_NN ._. This_DT process_NN involves_VBZ development_NN of_IN JACAW_NNP (_-LRB- Java_NNP C_NNP Automatic_NNP Wrapper_NNP )_-RRB- ,_, a_DT wrapper_NN tool_NN based_VBN on_IN the_DT Java_NNP Native_NNP Interface_NNP (_-LRB- JNI_NN )_-RRB- that_WDT can_MD automatically_RB generate_VB the_DT Java_NNP interface_NN and_CC related_JJ files_NNS for_IN any_DT C_NNP routine_NN ,_, or_CC library_NN of_IN C_NNP routines_NNS ._. 2._'' Related_NNP Approaches_NNPS Two_CD main_JJ approaches_NNS have_VBP been_VBN adopted_VBN in_IN applying_VBG Java_NNP to_TO Grid_NNP computing_NN ._. -_: if_IN the_DT number_NN of_IN the_DT legacy_JJ code_NN functions_NNS are_VBP very_RB high_JJ (_-LRB- of_IN thousands_NNS order_NN )_-RRB- the_DT available_JJ tools_NNS for_IN handling_VBG services_NNS are_VBP not_RB facing_VBG the_DT requirements_NNS ._. -_: the_DT public_JJ expose_VB of_IN all_PDT the_DT legacy_JJ code_NN functions_NNS can_MD be_VB a_DT danger_NN for_IN the_DT system_NN hosting_NN the_DT wrapped_VBN software_NN if_IN the_DT exposed_VBN function_NN list_NN includes_VBZ functions_NNS that_IN modify_VB the_DT host_NN environment_NN ._. A_DT first_JJ class_NN of_IN techniques_NNS comprises_VBZ the_DT black-box_NN reengineering_VBG techniques_NNS which_WDT integrate_VB systems_NNS via_IN adaptors_NNS that_IN wrap_NN legacy_NN code_NN as_IN a_DT service_NN (_-LRB- as_IN mentioned_VBN above_IN )_-RRB- ._. A_DT second_JJ class_NN comprises_VBZ white-box_JJ methods_NNS which_WDT require_VBP code_NN analysis_NN and_CC modification_NN in_IN order_NN to_TO obtain_VB the_DT code_NN components_NNS of_IN the_DT system_NN to_TO be_VB presented_VBN as_IN services_NNS ._. Both_DT approaches_NNS are_VBP valid_JJ in_IN different_JJ circumstances_NNS ,_, depending_VBG on_IN factors_NNS such_JJ as_IN the_DT granularity_NN of_IN the_DT code_NN ,_, the_DT assumed_JJ users_NNS and_CC application_NN area_NN ._. The_DT first_JJ class_NN is_VBZ mainly_RB applied_VBN in_IN the_DT case_NN when_WRB the_DT code_NN is_VBZ not_RB available_JJ ._. Recent_JJ papers_NNS on_IN this_DT subject_NN are_VBP [15_DT ]_NN and_CC [8]_NN ._. A_DT solution_NN for_IN the_DT particular_JJ case_NN of_IN interactive_JJ legacy_NN systems_NNS is_VBZ described_VBN in_IN [13]_JJ ._. Java_NNP wrapping_VBG can_MD be_VB used_VBN to_TO generate_VB the_DT service_NN interfaces_NNS automatically_RB as_IN outlined_VBN in_IN [1,12]_CD ._. Prominent_NNP examples_NNS in_IN this_DT direction_NN are_VBP JNL_RB ,_, JAMA_NNP ,_, SWIG_NNP ,_, JACAW_NNP or_CC MEDLI_NNP [12]_NNP ._. The_DT most_RBS remarkable_JJ non-invasive_JJ solution_NN is_VBZ represented_VBN by_IN GEMLCA_NNP ,_, the_DT Grid_NNP Execution_NNP Management_NNP for_IN Legacy_NNP Code_NNP [15]_NN ._. A_DT drawback_NN is_VBZ that_IN it_PRP supposes_VBZ that_IN the_DT legacy_NN code_NN is_VBZ activated_VBN in_IN a_DT command-line_JJ style_NN and_CC does_VBZ not_RB exploit_VB the_DT possible_JJ successive_JJ interactions_NNS ._. The_DT same_JJ comment_NN is_VBZ valid_JJ also_RB for_IN O’SOAP_NNP [13]_NNP that_WDT also_RB allows_VBZ legacy_NN command-line_NN oriented_VBN applications_NNS to_TO be_VB deployed_VBN as_IN Web_NNP services_NNS without_IN any_DT modification_NN ,_, as_RB well_RB as_IN for_IN OPAL_NNP [14]_NNP ._. International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 127_CD The_DT following_VBG two_CD main_JJ approaches_NNS have_VBP been_VBN adopted_VBN in_IN applying_VBG Java_NNP to_TO numerical_JJ computing_NN ._. In_IN the_DT first_JJ approach_NN ,_, scientific_JJ packages_NNS previously_RB written_VBN in_IN C_NNP ,_, C++_NNP ,_, or_CC FORTRAN_JJ are_VBP completely_RB rewritten_VBN in_IN Java_NNP ._. Examples_NNS include_VBP commercial_JJ packages_NNS such_JJ as_IN JNL_NNP from_IN Visual_JJ Numerics3_NN ,_, and_CC packages_NNS from_IN research_NN projects_NNS such_JJ as_IN JAMA_NNP designed_VBN by_IN Joe_NNP Hicklin_NNP ,_, Cleve_NNP Moler_NNP ,_, Peter_NNP Webb_NNP (_-LRB- 2000_CD )_-RRB- ._. Work_NN on_IN the_DT Numerically_NNP Intensive_NNP Java_NNP (_-LRB- NINJA_NN )_-RRB- supports_VBZ the_DT view_NN that_IN there_EX are_VBP no_DT fundamental_JJ technical_JJ reasons_NNS why_WRB Java_NNP should_MD not_RB be_VB used_VBN for_IN high_JJ performance_NN numerical_JJ computing_NN ._. NINJA_'' uses_VBZ language_NN and_CC compiler_NN techniques_NNS to_TO address_VB Java_NNP performance_NN problems_NNS ,_, and_CC this_DT type_NN of_IN approach_NN is_VBZ essential_JJ if_IN Java_NNP is_VBZ to_TO be_VB adopted_VBN throughout_IN the_DT high_JJ performance_NN computing_NN community_NN ._. In_IN the_DT second_JJ approach_NN ,_, legacy_NN packages_NNS are_VBP retained_VBN and_CC JNI_NNP is_VBZ used_VBN to_TO integrate_VB native_JJ methods_NNS (_-LRB- e_NN .g._NNP ,_, C_NNP code_NN )_-RRB- with_IN Java_NNP ._. This_DT may_MD not_RB always_RB be_VB an_DT optimal_JJ or_CC elegant_JJ solution_NN ,_, but_CC it_PRP is_VBZ necessary_JJ when_WRB large_JJ scientific_JJ libraries_NNS are_VBP not_RB immediately_RB available_JJ in_IN Java_NNP ._. Wrapping_NNP legacy_JJ C_NNP code_NN can_MD also_RB result_VB in_IN better_JJR performance_NN than_IN pure_JJ Java_NNP code_NN ,_, though_IN this_DT benefit_NN will_MD presumably_RB diminish_VB as_IN a_DT variety_NN of_IN compiler_NN and_CC runtime_NN techniques_NNS continue_VBP to_TO close_VB the_DT performance_NN gap_NN between_IN C_NNP and_CC Java_NNP code_NN ._. Examples_NNS of_IN the_DT wrapping_NN approach_NN include_VBP a_DT Java_NNP interface_NN to_TO MPI_NNP [3_CD ]_SYM and_CC openSSL_JJ [5]_NN ._. The_DT Janet_NNP [2_CD ]_SYM (_-LRB- JAva_NNP Native_NNP ExTensions_NNS )_-RRB- project_NN makes_VBZ use_NN of_IN Java_NNP language_NN extensions_NNS and_CC a_DT preprocessing_VBG tool_NN to_TO develop_VB Java_NNP interfaces_NNS to_TO native_JJ code_NN by_IN automatically_RB generating_VBG JNI_JJ code_NN ._. Santa_NNP Fe_NNP (_-LRB- 2000_CD )_-RRB- describes_VBZ a_DT new_JJ transformation_NN called_VBD alias_RB versioning_NN that_WDT takes_VBZ advantage_NN of_IN the_DT simplicity_NN of_IN pointers_NNS in_IN Java_NNP ._. This_DT transformation_NN ,_, combined_VBN with_IN other_JJ techniques_NNS that_IN we_PRP have_VBP developed_VBN ,_, enables_VBZ the_DT compiler_NN to_TO perform_VB high_JJ order_NN loop_NN transformations_NNS (_-LRB- for_IN better_JJR data_NNS locality_NN )_-RRB- and_CC parallelization_NN completely_RB automatically_RB ._. This_DT compiler_NN is_VBZ the_DT first_JJ to_TO have_VB such_JJ capabilities_NNS of_IN optimizing_VBG numerical_JJ Java_NNP codes_NNS ._. This_DT approach_NN requires_VBZ the_DT source_NN code_NN ,_, but_CC this_DT has_VBZ the_DT advantage_NN of_IN allowing_VBG a_DT high_JJ degree_NN of_IN control_NN over_IN the_DT low-level_JJ behaviour_NN of_IN the_DT native_JJ code_NN ._. The_DT Jaguar_NNP project_NN developed_VBN by_IN Johannes_NNP Gehrke_NNP and_CC Philippe_NNP Bonnet_NNP (_-LRB- 2001_CD )_-RRB- avoids_VBZ the_DT use_NN of_IN JNI_NNP in_IN accessing_VBG native_JJ code_NN by_IN extending_VBG the_DT Java_NNP runtime_NN environment_NN to_TO enable_VB direct_JJ Java_NNP access_NN to_TO operating_VBG system_NN and_CC hardware_NN resources_NNS ._. This_DT avoids_VBZ the_DT need_NN to_TO copy_VB data_NNS between_IN the_DT Java_NNP and_CC native_JJ code_NN ,_, and_CC leads_VBZ to_TO efficient_JJ code_NN ,_, but_CC the_DT approach_NN is_VBZ architecture_NN specific_JJ ._. Simplified_NNP Wrapper_NNP Interface_NNP Generator_NNP (_-LRB- SWIG_NNP )_-RRB- developed_VBN by_IN Dave_NNP (_-LRB- 1995_CD )_-RRB- connects_VBZ programs_NNS written_VBN in_IN C_NNP (_-LRB- and_CC C++_NNP )_-RRB- with_IN a_DT variety_NN of_IN high-level_JJ programming_NN languages_NNS (_-LRB- including_VBG Java_NNP )_-RRB- ._. It_PRP processes_VBZ an_DT interface_NN file_NN that_IN defines_NNS all_DT of_IN the_DT variables_NNS and_CC functions_NNS that_WDT need_VBP to_TO be_VB accessed_VBN from_IN Java_NNP (_-LRB- or_CC any_DT other_JJ language_NN )_-RRB- ,_, and_CC generates_VBZ the_DT JNI_NNP interface_NN to_TO the_DT C_NNP code_NN for_IN Java_NNP ._. However_RB ,_, SWIG_NNP is_VBZ not_RB completely_RB automatic_JJ (_-LRB- the_DT interface_NN file_NN needs_VBZ to_TO be_VB written_VBN )_-RRB- and_CC furthermore_RB ,_, sufficient_JJ knowledge_NN of_IN variables_NNS and_CC functions_NNS may_MD not_RB possible_RB without_IN the_DT source_NN code_NN (_-LRB- which_WDT is_VBZ often_RB not_RB available_JJ )_-RRB- ._. In_IN April_NNP 7_CD ,_, 2008_CD ._. SWIG-1.3.35_CD released_VBN ._. 2.1_CD Proposed_NNP Approach_NNP Any_DT Legacy_NNP system_NN has_VBZ the_DT following_VBG characteristics_NNS :_: •_NN Legacy_NN systems_NNS have_VBP some_DT reusable_JJ and_CC reliable_JJ functionality_NN embedded_VBN with_IN valuable_JJ business_NN logic_NN ;_: •_JJ The_DT functionalities_NNS within_IN legacy_JJ components_NNS are_VBP meaningful_JJ and_CC more_RBR powerful_JJ to_TO be_VB exposed_VBN in_IN Grid_NNP environment_NN from_IN the_DT requirements_NNS point_NN of_IN view_NN ;_: International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 128_CD •_JJ Reusable_JJ components_NNS extracted_VBN from_IN a_DT legacy_NN system_NN are_VBP fairly_RB maintainable_JJ compared_VBN to_TO maintain_VB the_DT whole_JJ legacy_NN system_NN ;_: •_JJ Some_DT components_NNS of_IN the_DT target_NN system_NN run_VBP on_IN different_JJ platforms_NNS or_CC vendor_NN products_NNS ._. The_DT aim_NN of_IN this_DT approach_NN is_VBZ to_TO reuse_VB recovered_VBN legacy_JJ components_NNS in_IN a_DT framework_NN ._. Firstly_RB ,_, an_DT evaluation_NN of_IN legacy_NN systems_NNS is_VBZ performed_VBN to_TO confirm_VB the_DT applicability_NN of_IN this_DT approach_NN ._. Secondly_RB ,_, the_DT legacy_NN system_NN is_VBZ decomposed_VBN into_IN component_NN candidates_NNS via_IN hierarchical_JJ clustering_VBG techniques_NNS ,_, which_WDT are_VBP the_DT essential_JJ techniques_NNS used_VBN in_IN component_NN mining_NN in_IN our_PRP$ approach_NN ._. Then_RB static_JJ program_NN slicing_NN techniques_NNS are_VBP applied_VBN to_TO further_JJ understand_VB these_DT component_NN candidates_NNS ._. Reverse_NN engineering_NN techniques_NNS play_VBP an_DT important_JJ role_NN in_IN this_DT analysis_NN process_NN ._. Based_VBN on_IN the_DT comprehension_NN ,_, these_DT component_NN candidates_NNS are_VBP extracted_VBN as_IN concerned_JJ legacy_JJ code_NN segments_NNS ._. In_IN order_NN to_TO be_VB reused_VBN as_IN components_NNS ,_, the_DT extracted_VBN legacy_NN code_NN is_VBZ refined_VBN and_CC encapsulated_VBN mainly_RB through_IN JNI_NNP (_-LRB- Java_NNP Native_NNP Interfaces_NNS )_-RRB- ._. After_IN these_DT legacy_JJ components_NNS are_VBP created_VBN ,_, they_PRP will_MD be_VB integrated_VBN in_IN a_DT framework_NN as_IN a_DT set_NN of_IN software_NN resource_NN services_NNS ,_, which_WDT may_MD be_VB composed_VBN together_RB to_TO form_VB a_DT grid_NN application_NN ._. 3._'' Legacy_NNP Code_NNP Generator_NNP The_DT command_NN line_NN description_NN has_VBZ to_TO be_VB complete_JJ enough_RB to_TO allow_VB dynamic_JJ composition_NN of_IN the_DT command_NN line_NN from_IN the_DT list_NN of_IN parameters_NNS at_IN the_DT service_NN invocation_NN time_NN and_CC to_TO access_VB the_DT executable_NN and_CC input_NN data_NNS files_VBZ ._. High_NNP performance_NN legacy_NN codes_NNS are_VBP pre-existing_JJ codes_NNS ,_, mostly_RB in_IN C_NNP or_CC FORTRAN_NNP ,_, that_WDT possess_VBP the_DT following_JJ features_NNS :_: (_-LRB- 1_LS )_-RRB- they_PRP are_VBP domain_NN specific_JJ ;_: (_-LRB- 2_LS )_-RRB- they_PRP are_VBP hard_JJ to_TO re-use_VB in_IN other_JJ applications_NNS ;_: (_-LRB- 3_LS )_-RRB- they_PRP are_VBP still_RB useful_JJ ;_: and_CC ,_, (_-LRB- 4_LS )_-RRB- they_PRP are_VBP often_RB large_JJ ._. 3.1_CD The_DT Implementation_NN of_IN the_DT Wrapper_NNP Generator_NNP Automatic_NNP Wrapper_NNP Generator_NNP Native_NNP Libraries_NNP (_-LRB- AWGNL_NN )_-RRB- can_MD be_VB used_VBN to_TO wrap_VB existing_VBG legacy_NN code_NN in_IN C_NNP as_IN a_DT Java_NNP code_NN that_WDT calls_VBZ the_DT original_JJ code_NN through_IN the_DT Java_NNP Native_NNP Interface_NNP ._. AWGNL_NNP can_MD be_VB applied_VBN automatically_RB to_TO wrap_VB entire_JJ software_NN libraries_NNS thereby_RB saving_VBG time_NN and_CC substantially_RB reducing_VBG the_DT likelihood_NN of_IN introducing_VBG coding_JJ errors_NNS ._. AWGNL_NN is_VBZ based_VBN on_IN the_DT Java_NNP Native_NNP Interface_NNP (_-LRB- JNI_NN )_-RRB- [6]_NN ,_, which_WDT is_VBZ an_DT API_NN that_WDT allows_VBZ Java_NNP code_NN to_TO interact_VB with_IN code_NN written_VBN in_IN another_DT language_NN ._. AWGNL_'' shields_VBZ the_DT user_NN from_IN the_DT details_NNS of_IN JNI_NNP ,_, and_CC does_VBZ not_RB require_VB the_DT user_NN to_TO have_VB any_DT knowledge_NN of_IN how_WRB to_TO use_VB it_PRP ._. AWGNL_NNP takes_VBZ the_DT C_NNP header_NN files_NNS as_IN input_NN and_CC automatically_RB creates_VBZ the_DT corresponding_JJ Java_NNP and_CC C_NNP files_NNS needed_VBD to_TO make_VB native_JJ calls_NNS ._. AWGNL_NN also_RB automatically_RB compiles_VBZ the_DT Java_NNP files_NNS ,_, creates_VBZ the_DT header_NN files_NNS ,_, and_CC builds_VBZ a_DT shared_VBN library_NN of_IN the_DT JNI-enabled_JJ C_NNP routines_NNS ._. Legacy_NNP Code_NNP Wrapper_NNP Generator_NNP facilitates_VBZ the_DT automatic_JJ incorporation_NN of_IN a_DT wide_JJ range_NN of_IN existing_VBG legacy_NN codes_NNS ._. When_WRB using_VBG it_PRP ,_, developers_NNS only_RB need_VBP to_TO specify_VB the_DT parameters_NNS (_-LRB- properties_NNS )_-RRB- of_IN the_DT legacy_NN code_NN they_PRP want_VBP to_TO wrap_VB ,_, then_RB submit_VB the_DT parameters_NNS to_TO WG_NNP which_WDT then_RB generates_VBZ all_PDT the_DT interfaces_NNS needed_VBD to_TO convert_VB the_DT legacy_JJ code_NN into_IN a_DT component_NN ._. 3.2_CD Wrapper_NNP Generator_NNP Data_NNP Flow_NNP International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 129_CD Wrapper_NNP generator_NN facilitates_VBZ the_DT automatic_JJ incorporation_NN of_IN a_DT wide_JJ range_NN of_IN existing_VBG legacy_NN codes_NNS ._. When_WRB using_VBG it_PRP ,_, developers_NNS only_RB need_VBP to_TO specify_VB the_DT parameters_NNS (_-LRB- properties_NNS )_-RRB- of_IN the_DT legacy_NN code_NN they_PRP want_VBP to_TO wrap_VB ,_, then_RB submit_VB the_DT parameters_NNS to_TO WG_NNP which_WDT then_RB generates_VBZ all_PDT the_DT interfaces_NNS needed_VBD to_TO convert_VB the_DT legacy_JJ code_NN into_IN a_DT component_NN ._. The_DT interfaces_NNS include_VBP a_DT IDL_NNP interface_NN ,_, an_DT XML_NNP definition_NN ,_, an_DT implementation_NN code_NN (_-LRB- Body_NNP )_-RRB- ,_, a_DT Listener_NN and_CC a_DT Publisher_NNP ._. The_DT Listener_NNP and_CC Publisher_NNP are_VBP used_VBN to_TO interact_VB with_IN other_JJ components_NNS ._. Figure_NN 1_CD shows_VBZ the_DT data_NNS flow_NN in_IN the_DT Wrapper_NNP generator_NN ._. Developers_NNS are_VBP diﬀerent_NN from_IN end_NN users_NNS in_IN that_DT developers_NNS create_VBP components_NNS ,_, whereas_IN end_NN users_NNS make_VBP use_NN of_IN the_DT components_NNS to_TO construct_VB applications_NNS ._. Developers_NNS need_VBP to_TO know_VB some_DT information_NN about_IN the_DT legacy_NN code_NN ,_, such_JJ as_IN its_PRP$ input(_NN s_VBZ )/output(_JJ s_PRP )_-RRB- ._. However_RB ,_, they_PRP do_VBP not_RB need_VB to_TO know_VB the_DT exact_JJ implementation_NN of_IN the_DT legacy_JJ code_NN ._. The_DT main_JJ constraints_NNS of_IN a_DT legacy_JJ code_NN that_WDT can_MD be_VB wrapped_VBN as_IN a_DT component_NN with_IN the_DT WG_NNP are_VBP :_: •_RB The_DT legacy_NN code_NN can_MD be_VB a_DT sequential_JJ code_NN or_CC a_DT parallel_JJ code_NN using_VBG MPI._NNP •_NNP The_DT legacy_JJ code_NN can_MD be_VB written_VBN in_IN C_NNP ,_, Fortran_NNP or_CC Java_NNP ._. •_NNS The_DT legacy_NN code_NN can_MD be_VB located_VBN anywhere_RB within_IN a_DT distributed_VBN computing_NN network_NN ._. •_'' The_DT legacy_NN code_NN must_MD be_VB a_DT binary_JJ code_NN and_CC can_MD perform_VB certain_JJ functions_NNS with_IN some_DT input(_NN s_VBZ )/output(_JJ s_PRP )_-RRB- ._. Figure_NNP 1_CD ._. The_DT Wrapper_NNP generator_NN data_NNS flow_NN 3.3_CD Data_NNP Mediation_NNP Interface_NNP The_DT data_NNS mediation_NN interface_NN automates_VBZ the_DT process_NN of_IN mediating_VBG the_DT data_NNS types_NNS between_IN the_DT Java_NNP classes_NNS and_CC the_DT C_NNP function_NN calls_VBZ ._. This_DT is_VBZ accomplished_VBN by_IN providing_VBG a_DT graphical_JJ user_NN interface_NN (_-LRB- GUI)_NNP that_WDT takes_VBZ the_DT user_NN through_IN a_DT set_NN of_IN steps_NNS to_TO select_VB the_DT parameters_NNS for_IN the_DT wrapped_VBN function_NN from_IN an_DT input_NN class_NN and_CC then_RB to_TO initialize_VB and_CC set_VB the_DT data_NNS for_IN the_DT output_NN class_NN ._. The_DT use_NN of_IN Data_NNP Mediation_NNP Interface_NNP is_VBZ divided_VBN into_IN three_CD phases_NNS :_: •_NN DMI_NNP displays_VBZ the_DT instance_NN variables_NNS of_IN the_DT classes_NNS in_IN the_DT arguments_NNS passed_VBD to_TO the_DT target_NN routine_NN ._. The_DT user_NN then_RB graphically_RB maps_NNS some_DT or_CC all_DT of_IN these_DT variables_NNS to_TO the_DT instance_NN variables_NNS of_IN a_DT selected_VBN Java_NNP class_NN through_IN its_PRP$ get_VBP and_CC set_VBN methods_NNS ,_, thereby_RB creating_VBG a_DT port_NN for_IN the_DT target_NN routine_NN ._. This_DT process_NN of_IN port_NN creation_NN is_VBZ repeated_VBN until_IN all_DT instance_NN variables_NNS passed_VBD through_IN the_DT target_NN routine_JJ arguments_NNS have_VBP been_VBN mapped_VBN to_TO a_DT port_NN ._. International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP •_NNP Next_IN the_DT user_NN mediates_VBZ the_DT data_NNS returned_VBD from_IN the_DT target_NN function_NN to_TO one_CD or_CC more_JJR Java_JJ output_NN classes_NNS ,_, thereby_RB creating_VBG one_CD or_CC more_JJR output_NN port(_NN s_VBZ )_-RRB- ._. Thi_NNP to_TO the_DT mapping_NN of_IN the_DT instance_NN variables_NNS of_IN the_DT target_NN routine_JJ arguments_NNS ._. •_NN Finally_RB ,_, the_DT user_NN mediates_VBZ any_DT other_JJ data_NNS between_IN the_DT input_NN Java_NNP class_NN and_CC the_DT output_NN Java_NNP class_NN (es_NNS )_-RRB- in_IN phase_NN 2._'' This_DT is_VBZ data_NNS that_WDT is_VBZ not_RB needed_VBN by_IN the_DT is_VBZ not_RB passed_VBN to_TO it_PRP in_IN its_PRP$ arguments_NNS ,_, but_CC which_WDT is_VBZ needed_VBN in_IN the_DT output_NN port(_NN s_VBZ )_-RRB- created_VBN in_IN previous_JJ phase_NN ._. 4_CD ._. Role_NNP of_IN Java_NNP Native_NNP Interface_NNP When_WRB the_DT Java_NNP platform_NN is_VBZ deployed_VBN on_IN top_NN of_IN host_NN environments_NNS ,_, it_PRP may_MD become_VB desirable_JJ or_CC necessary_JJ to_TO allow_VB Java_NNP applications_NNS to_TO work_VB closely_RB with_IN native_JJ code_NN written_VBN in_IN other_JJ languages_NNS ._. Programmers_NNS have_VBP begun_VBN to_TO adopt_VB the_DT Java_NNP platform_NN to_TO build_VB applicat_NN traditionally_RB written_VBN in_IN C_NNP and_CC C++_NNP ._. The_DT JNI_NNP is_VBZ a_DT powerful_JJ feature_NN that_IN allows_VBZ you_PRP to_TO take_VB advantage_NN of_IN the_DT Java_NNP platform_NN ,_, but_CC still_RB utilize_VB code_NN written_VBN in_IN other_JJ languages_NNS ._. As_IN a_DT part_NN of_IN the_DT Java_NNP virtual_JJ machine_NN implementation_NN ,_, the_DT JNI_NNP is_VBZ a_DT applications_NNS to_TO invoke_VB native_JJ code_NN and_CC vice_NN versa_NN ._. Fig_VB The_DT JNI_NNP is_VBZ designed_VBN to_TO handle_VB situations_NNS where_WRB you_PRP need_VBP to_TO combine_VB Java_NNP applications_NNS with_IN native_JJ code_NN ._. As_IN a_DT two-way_JJ interface_NN ,_, the_DT JNI_NNP can_MD support_VB two_CD types_NNS of_IN native_JJ code_NN :_: native_JJ libraries_NNS and_CC native_JJ applications_NNS ._. •_NN Use_NNP the_DT JNI_NNP to_TO write_VB native_JJ methods_NNS implemented_VBN in_IN native_JJ libraries_NNS ._. Java_NN applications_NNS call_VBP native_JJ methods_NNS in_IN the_DT same_JJ way_NN that_IN they_PRP call_VBP methods_NNS implemented_VBN in_IN the_DT Java_NNP programming_NN language_NN ._. Behind_IN the_DT scenes_NNS ,_, however_RB ,_, native_JJ methods_NNS are_VBP implemented_VBN native_JJ libraries_NNS ._. •_NN The_DT JNI_NNP supports_VBZ an_DT invocation_NN interface_NN machine_NN implementation_NN into_IN native_JJ applications_NNS ._. Native_NN applications_NNS can_MD link_VB with_IN a_DT native_JJ library_NN that_IN implements_NNS the_DT Java_NNP virtual_JJ machine_NN ,_, and_CC then_RB use_VB the_DT invocation_NN International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP Next_NNP the_DT user_NN mediates_VBZ the_DT data_NNS returned_VBD from_IN the_DT target_NN function_NN to_TO one_CD or_CC more_JJR Java_JJ output_NN classes_NNS ,_, thereby_RB creating_VBG one_CD or_CC more_JJR output_NN port(_NN s_VBZ )_-RRB- ._. This_DT process_NN is_VBZ very_RB similar_JJ to_TO the_DT mapping_NN of_IN the_DT instance_NN variables_NNS of_IN the_DT target_NN routine_JJ arguments_NNS ._. Finally_RB ,_, the_DT user_NN mediates_VBZ any_DT other_JJ data_NNS between_IN the_DT input_NN Java_NNP class_NN and_CC the_DT output_NN (es_NNS )_-RRB- in_IN phase_NN 2._'' This_DT is_VBZ data_NNS that_WDT is_VBZ not_RB needed_VBN by_IN the_DT target_NN routine_NN ,_, and_CC hence_RB is_VBZ not_RB passed_VBN to_TO it_PRP in_IN its_PRP$ arguments_NNS ,_, but_CC which_WDT is_VBZ needed_VBN in_IN the_DT output_NN port(_NN s_VBZ )_-RRB- created_VBN in_IN nterface_NN When_WRB the_DT Java_NNP platform_NN is_VBZ deployed_VBN on_IN top_NN of_IN host_NN environments_NNS ,_, it_PRP may_MD become_VB desirable_JJ or_CC necessary_JJ to_TO allow_VB Java_NNP applications_NNS to_TO work_VB closely_RB with_IN native_JJ code_NN written_VBN in_IN other_JJ languages_NNS ._. Programmers_NNS have_VBP begun_VBN to_TO adopt_VB the_DT Java_NNP platform_NN to_TO build_VB applications_NNS that_WDT were_VBD traditionally_RB written_VBN in_IN C_NNP and_CC C++_NNP ._. The_DT JNI_NNP is_VBZ a_DT powerful_JJ feature_NN that_IN allows_VBZ you_PRP to_TO take_VB advantage_NN of_IN the_DT Java_NNP platform_NN ,_, but_CC still_RB utilize_VB code_NN written_VBN in_IN other_JJ languages_NNS ._. As_IN a_DT part_NN of_IN the_DT Java_NNP virtual_JJ machine_NN implementation_NN ,_, the_DT JNI_NNP is_VBZ a_DT two-way_JJ interface_NN that_WDT allows_VBZ Java_NNP applications_NNS to_TO invoke_VB native_JJ code_NN and_CC vice_NN versa_NN ._. Figure_NN 2_CD illustrates_VBZ the_DT role_NN of_IN the_DT JNI._NNP Figure_NN 2._VBD Role_NNP of_IN JNI_NNP The_DT JNI_NNP is_VBZ designed_VBN to_TO handle_VB situations_NNS where_WRB you_PRP need_VBP to_TO combine_VB Java_NNP applications_NNS with_IN way_NN interface_NN ,_, the_DT JNI_NNP can_MD support_VB two_CD types_NNS of_IN native_JJ code_NN :_: native_JJ native_JJ methods_NNS that_WDT allow_VBP Java_NNP applications_NNS to_TO call_VB functions_NNS implemented_VBN in_IN native_JJ libraries_NNS ._. Java_NN applications_NNS call_VBP native_JJ methods_NNS in_IN the_DT same_JJ way_NN that_IN they_PRP call_VBP methods_NNS implemented_VBN in_IN the_DT Java_NNP programming_NN language_NN ._. Behind_IN the_DT scenes_NNS ,_, however_RB ,_, native_JJ methods_NNS are_VBP implemented_VBN in_IN another_DT language_NN and_CC reside_NN in_IN invocation_NN interface_NN that_WDT allows_VBZ you_PRP to_TO embed_VB a_DT Java_NNP virtual_JJ machine_NN implementation_NN into_IN native_JJ applications_NNS ._. Native_NN applications_NNS can_MD link_VB with_IN a_DT native_JJ library_NN that_IN implements_NNS the_DT Java_NNP virtual_JJ machine_NN ,_, and_CC then_RB use_VB the_DT invocation_NN International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 130_CD Next_IN the_DT user_NN mediates_VBZ the_DT data_NNS returned_VBD from_IN the_DT target_NN function_NN to_TO one_CD or_CC more_JJR Java_FW s_VBZ process_NN is_VBZ very_RB similar_JJ Finally_RB ,_, the_DT user_NN mediates_VBZ any_DT other_JJ data_NNS between_IN the_DT input_NN Java_NNP class_NN and_CC the_DT output_NN target_NN routine_NN ,_, and_CC hence_RB is_VBZ not_RB passed_VBN to_TO it_PRP in_IN its_PRP$ arguments_NNS ,_, but_CC which_WDT is_VBZ needed_VBN in_IN the_DT output_NN port(_NN s_VBZ )_-RRB- created_VBN in_IN When_WRB the_DT Java_NNP platform_NN is_VBZ deployed_VBN on_IN top_NN of_IN host_NN environments_NNS ,_, it_PRP may_MD become_VB desirable_JJ or_CC necessary_JJ to_TO allow_VB Java_NNP applications_NNS to_TO work_VB closely_RB with_IN native_JJ code_NN written_VBN in_IN other_JJ ions_NNS that_WDT were_VBD traditionally_RB written_VBN in_IN C_NNP and_CC C++_NNP ._. The_DT JNI_NNP is_VBZ a_DT powerful_JJ feature_NN that_IN allows_VBZ you_PRP to_TO take_VB advantage_NN of_IN the_DT Java_NNP platform_NN ,_, but_CC still_RB utilize_VB code_NN written_VBN in_IN other_JJ languages_NNS ._. As_IN a_DT part_NN of_IN the_DT interface_NN that_WDT allows_VBZ Java_NNP illustrates_VBZ the_DT role_NN of_IN the_DT JNI._NNP The_DT JNI_NNP is_VBZ designed_VBN to_TO handle_VB situations_NNS where_WRB you_PRP need_VBP to_TO combine_VB Java_NNP applications_NNS with_IN way_NN interface_NN ,_, the_DT JNI_NNP can_MD support_VB two_CD types_NNS of_IN native_JJ code_NN :_: native_JJ allow_VBP Java_NNP applications_NNS to_TO call_VB functions_NNS implemented_VBN in_IN native_JJ libraries_NNS ._. Java_NN applications_NNS call_VBP native_JJ methods_NNS in_IN the_DT same_JJ way_NN that_IN they_PRP call_VBP methods_NNS implemented_VBN in_IN the_DT Java_NNP programming_NN language_NN ._. Behind_IN the_DT in_IN another_DT language_NN and_CC reside_NN in_IN that_DT allows_VBZ you_PRP to_TO embed_VB a_DT Java_NNP virtual_JJ machine_NN implementation_NN into_IN native_JJ applications_NNS ._. Native_NN applications_NNS can_MD link_VB with_IN a_DT native_JJ library_NN that_IN implements_NNS the_DT Java_NNP virtual_JJ machine_NN ,_, and_CC then_RB use_VB the_DT invocation_NN International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 131_CD interface_NN to_TO execute_VB software_NN components_NNS written_VBN in_IN the_DT Java_NNP programming_NN language_NN ._. For_IN example_NN ,_, a_DT web_NN browser_NN written_VBN in_IN C_NNP can_MD execute_VB downloaded_JJ applets_NNS in_IN an_DT embedded_VBN Java_NNP virtual_JJ machine_NN implementation_NN ._. There_EX is_VBZ a_DT simple_JJ example_NN of_IN using_VBG the_DT Java_NNP Native_NNP Interface_NNP ._. We_PRP will_MD write_VB a_DT Java_NNP application_NN that_WDT calls_VBZ a_DT C_NNP function_NN to_TO print_NN “_NNS Hello_UH World_NNP !_. ”_. The_DT process_NN consists_VBZ of_IN the_DT following_JJ steps_NNS :_: •_NNS Create_NNP a_DT class_NN (_-LRB- HelloWorld_NNP .java_NNP )_-RRB- that_WDT declares_VBZ the_DT native_JJ method_NN ._. •_'' Use_NNP javac_NNP to_TO compile_VB the_DT HelloWorld_NNP source_NN file_NN ,_, resulting_VBG in_IN the_DT class_NN file_NN HelloWorld.class_NNP ._. The_DT javac_NN compiler_NN is_VBZ supplied_VBN with_IN JDK_NNP or_CC Java_NNP 2_CD SDK_NN releases_NNS ._. •_NN Use_NNP javah_NNP -jni_NNP to_TO generate_VB a_DT C_NNP header_NN file_NN (_-LRB- HelloWorld_NNP .h_NN )_-RRB- containing_VBG the_DT function_NN prototype_NN for_IN the_DT native_JJ method_NN implementation_NN ._. The_DT javah_NN tool_NN is_VBZ provided_VBN with_IN JDK_NNP or_CC Java_NNP 2_CD SDK_NN releases_NNS ._. •_NN Write_VBZ the_DT C_NNP implementation_NN (_-LRB- HelloWorld.c_NNP )_-RRB- of_IN the_DT native_JJ method_NN ._. •_'' Compile_NNP the_DT C_NNP implementation_NN into_IN a_DT native_JJ library_NN ,_, creating_VBG HelloWorld_NNP .dll_NNP or_CC libHelloWorld_NN .so_RB ._. Use_VB the_DT C_NNP compiler_NN and_CC linker_NN available_JJ on_IN the_DT host_NN environment_NN ._. •_VB Run_VB the_DT HelloWorld_NNP program_NN using_VBG the_DT java_NN runtime_NN interpreter_NN ._. Both_DT the_DT class_NN files_NNS (_-LRB- HelloWorld.class_NNP )_-RRB- and_CC the_DT native_JJ library_NN (_-LRB- HelloWorld_NNP .dll_, or_CC libHelloWorld_NN .so_IN )_-RRB- are_VBP loaded_VBN at_IN runtime_NN ._. Wrapper_NNP Generator_NNP shields_VBZ the_DT user_NN from_IN the_DT details_NNS of_IN JNI_NNP ,_, and_CC does_VBZ not_RB require_VB the_DT user_NN to_TO have_VB any_DT knowledge_NN of_IN how_WRB to_TO use_VB it_PRP ._. JACAW_NNP takes_VBZ the_DT C_NNP header_NN files_NNS as_IN input_NN and_CC automatically_RB creates_VBZ the_DT corresponding_JJ Java_NNP and_CC C_NNP files_NNS needed_VBD to_TO make_VB native_JJ calls_NNS ._. JACAW_NN also_RB automatically_RB compiles_VBZ the_DT Java_NNP files_NNS ,_, creates_VBZ the_DT header_NN files_NNS ,_, and_CC builds_VBZ a_DT shared_VBN library_NN of_IN the_DT JNI-enabled_JJ C_NNP routines_NNS ._. Following_VBG example_NN shows_NNS of_IN what_WP Wrapper_NNP Generator_NNP does_VBZ ._. 4.1_CD Declare_NNP the_DT Native_JJ Method_NNP You_PRP begin_VBP by_IN writing_VBG the_DT following_VBG program_NN in_IN the_DT Java_NNP programming_NN language_NN ._. The_DT program_NN defines_VBZ a_DT class_NN named_VBN HelloWorld_NNP that_WDT contains_VBZ a_DT native_JJ method_NN print_NN ._. class_NN HelloWorld_NNP {_VBD private_JJ native_JJ void_NN print(_NN )_-RRB- ;_: public_JJ static_JJ void_NN main(_NN String[_NNP ]_JJ args_NNS )_-RRB- {_VBP new_JJ HelloWorld(_JJ ).print(_NN )_-RRB- ;_: }_RB static_JJ {_NN System_NNP .loadLibrary_NNP (_-LRB- "_`` HelloWorld_NNP "_'' )_-RRB- ;_: }_IN }_NNP The_DT HelloWorld_NNP class_NN definition_NN begins_VBZ with_IN the_DT declaration_NN of_IN the_DT print_NN native_JJ method_NN ._. This_DT is_VBZ followed_VBN by_IN a_DT main_JJ method_NN that_IN instantiates_NNS the_DT HelloWorld_NNP class_NN and_CC invokes_VBZ the_DT print_NN native_JJ method_NN for_IN this_DT instance_NN ._. The_DT last_JJ part_NN of_IN the_DT class_NN definition_NN is_VBZ a_DT static_JJ initializer_NN that_IN loads_NNS the_DT native_JJ library_NN containing_VBG the_DT implementation_NN of_IN the_DT print_NN native_JJ method_NN ._. There_EX are_VBP two_CD differences_NNS between_IN the_DT declaration_NN of_IN a_DT native_JJ method_NN such_JJ as_IN print_NN and_CC the_DT declaration_NN of_IN regular_JJ methods_NNS in_IN the_DT Java_NNP programming_NN language_NN ._. A_DT native_JJ method_NN declaration_NN must_MD contain_VB the_DT native_JJ modifier_NN ._. The_DT native_JJ modifier_NN indicates_VBZ that_IN this_DT method_NN is_VBZ implemented_VBN in_IN another_DT language_NN ._. Also_RB ,_, the_DT native_JJ method_NN declaration_NN is_VBZ terminated_VBN with_IN a_DT semicolon_NN ,_, the_DT statement_NN terminator_IN symbol_NN ,_, because_IN there_EX is_VBZ no_DT implementation_NN for_IN native_JJ methods_NNS in_IN the_DT class_NN International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 132_CD itself_PRP ._. We_PRP will_MD implement_VB the_DT print_NN method_NN in_IN a_DT separate_JJ C_NNP file_NN ._. Before_IN the_DT native_JJ method_NN print_NN can_MD be_VB called_VBN ,_, the_DT native_JJ library_NN that_IN implements_NNS print_NN must_MD be_VB loaded_VBN ._. In_IN this_DT case_NN ,_, we_PRP load_NN the_DT native_JJ library_NN in_IN the_DT static_JJ initializer_NN of_IN the_DT HelloWorld_NNP class_NN ._. The_DT Java_NNP virtual_JJ machine_NN automatically_RB runs_VBZ the_DT static_JJ initializer_NN before_IN invoking_VBG any_DT methods_NNS in_IN the_DT HelloWorld_NNP class_NN ,_, thus_RB ensuring_VBG that_IN the_DT native_JJ library_NN is_VBZ loaded_VBN before_IN the_DT print_NN native_JJ method_NN is_VBZ called_VBN ._. We_PRP define_VB a_DT main_JJ method_NN to_TO be_VB able_JJ to_TO run_VB the_DT HelloWorld_NNP class_NN ._. HelloWorld_'' main_JJ calls_VBZ the_DT native_JJ method_NN print_NN in_IN the_DT same_JJ manner_NN as_IN it_PRP would_MD call_VB a_DT regular_JJ method_NN ._. System_NNP .loadLibrary_NNP takes_VBZ a_DT library_NN name_NN ,_, locates_VBZ a_DT native_JJ library_NN that_IN corresponds_NNS to_TO that_DT name_NN ,_, and_CC loads_NNS the_DT native_JJ library_NN into_IN the_DT application_NN ._. We_PRP will_MD discuss_VB the_DT exact_JJ loading_NN process_NN later_RB in_IN the_DT book_NN ._. For_IN now_RB simply_RB remember_VB that_IN in_IN order_NN for_IN System_NNP .loadLibrary_NNP (_-LRB- "_`` HelloWorld_NNP "_'' )_-RRB- to_TO succeed_VB ,_, we_PRP need_VBP to_TO create_VB a_DT native_JJ library_NN called_VBD HelloWorld_NNP .dll_NNP on_IN Win32_NNP ,_, or_CC libHelloWorld_NN .so_RB on_IN Solaris_NNP ._. 4.2_CD Compile_NNP the_DT HelloWorld_NNP Class_NNP After_IN you_PRP have_VBP defined_VBN the_DT HelloWorld_NNP class_NN ,_, save_IN the_DT source_NN code_NN in_IN a_DT file_NN called_VBN HelloWorld_NNP .java_NNP ._. Then_RB compile_VB the_DT source_NN file_NN using_VBG the_DT javac_NN compiler_NN that_WDT comes_VBZ with_IN the_DT JDK_NNP or_CC Java_NNP 2_CD SDK_NNP release_NN :_: javac_NN HelloWorld_NNP .java_NNP This_DT command_NN will_MD generate_VB a_DT HelloWorld.class_NNP file_NN in_IN the_DT current_JJ directory_NN ._. 4.3_CD Create_NNP the_DT Native_NNP Method_NNP Header_NNP File_NNP Next_IN we_PRP will_MD use_VB the_DT javah_NN tool_NN to_TO generate_VB a_DT JNI-style_JJ header_NN file_NN that_WDT is_VBZ useful_JJ when_WRB implementing_VBG the_DT native_JJ method_NN in_IN C._NNP You_PRP can_MD run_VB javah_NN on_IN the_DT HelloWorld_NNP class_NN as_IN follows_VBZ :_: javah_JJ -jni_NNP HelloWorld_NNP The_DT name_NN of_IN the_DT header_NN file_NN is_VBZ the_DT class_NN name_NN with_IN a_DT “.h”_NN appended_VBD to_TO the_DT end_NN of_IN it_PRP ._. The_DT command_NN shown_VBN above_IN generates_VBZ a_DT file_NN named_VBN HelloWorld_NNP .h_NNP ._. We_PRP will_MD not_RB list_VB the_DT generated_VBN header_NN file_NN in_IN its_PRP$ entirety_NN here_RB ._. The_DT most_RBS important_JJ part_NN of_IN the_DT header_NN file_NN is_VBZ the_DT function_NN prototype_NN for_IN Java__NNP HelloWorld_print_NNP ,_, which_WDT is_VBZ the_DT C_NNP function_NN that_IN implements_NNS the_DT HelloWorld_NNP .print_NN method_NN :_: JNIEXPORT_NNP void_NN JNICALL_NNP Java__NNP HelloWorld_print_NNP (_-LRB- JNIEnv_NNP *_NNP ,_, jobject_NN )_-RRB- ;_: Ignore_VB the_DT JNIEXPORT_NNP and_CC JNICALL_NNP macros_NNS for_IN now_RB ._. You_PRP may_MD have_VB noticed_VBN that_IN the_DT C_NNP implementation_NN of_IN the_DT native_JJ method_NN accepts_VBZ two_CD arguments_NNS even_RB though_IN the_DT corresponding_JJ declaration_NN of_IN the_DT native_JJ method_NN accepts_VBZ no_DT arguments_NNS ._. The_DT first_JJ argument_NN for_IN every_DT native_JJ method_NN implementation_NN is_VBZ a_DT JNIEnv_NNP interface_NN pointer_NN ._. The_DT second_JJ argument_NN is_VBZ a_DT reference_NN to_TO the_DT HelloWorld_NNP object_NN itself_PRP (_-LRB- sort_NN of_IN like_IN the_DT “this_NNP ”_NNP pointer_NN in_IN C++_NNP )_-RRB- ._. We_PRP will_MD discuss_VB how_WRB to_TO use_VB the_DT JNIEnv_NNP interface_NN pointer_NN and_CC the_DT jobject_JJ arguments_NNS later_RB in_IN this_DT book_NN ,_, but_CC this_DT simple_JJ example_NN ignores_VBZ both_DT arguments_NNS ._. International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 133_CD 4.4_CD Write_IN the_DT Native_NNP Method_NNP Implementation_NNP The_DT JNI-style_JJ header_NN file_NN generated_VBN by_IN javah_NN helps_VBZ you_PRP to_TO write_VB C_NNP or_CC C++_NNP implementations_NNS for_IN the_DT native_JJ method_NN ._. The_DT function_NN that_IN you_PRP write_VBP must_MD follow_VB the_DT prototype_NN specified_VBN in_IN the_DT generated_VBN header_NN file_NN ._. You_PRP can_MD implement_VB the_DT HelloWorld_NNP .print_NN method_NN in_IN a_DT C_NNP file_NN HelloWorld.c_NNP as_IN follows_VBZ :_: #include_VB <jni_NNS .h>_. #include_NN <stdio.h>_CC #include_VB "_`` HelloWorld_NNP .h_. "_'' JNIEXPORT_NNP void_VB JNICALL_NNP Java__NNP HelloWorld_print(JNIEnv_NNP *env_NNP ,_, jobject_JJ obj_NN )_-RRB- {_NN printf_NN (_-LRB- "_`` Hello_UH World_NNP !\n_JJ "_'' )_-RRB- ;_: return_NN ;_: }_: The_DT implementation_NN of_IN this_DT native_JJ method_NN is_VBZ straightforward_JJ ._. It_PRP uses_VBZ the_DT printf_NN function_NN to_TO display_VB the_DT string_NN “_IN Hello_UH World_NNP !_. ”_NNP and_CC then_RB returns_VBZ ._. As_IN mentioned_VBN before_IN ,_, both_DT arguments_NNS ,_, the_DT JNIEnv_NNP pointer_NN and_CC the_DT reference_NN to_TO the_DT object_NN ,_, are_VBP ignored_VBN ._. The_DT C_NNP program_NN includes_VBZ three_CD header_NN files_NNS :_: •_NN jni_NNS .h_, —_'' This_DT header_NN file_NN provides_VBZ information_NN the_DT native_JJ code_NN needs_VBZ to_TO call_VB JNI_JJ functions_NNS When_WRB writing_VBG native_JJ methods_NNS ,_, you_PRP must_MD always_RB include_VB this_DT file_NN in_IN your_PRP$ C_NNP or_CC C++_NNP source_NN files_NNS ._. •_NN stdio.h_NN —_IN The_DT code_NN snippet_NN above_RB also_RB includes_VBZ stdio.h_NN because_IN it_PRP uses_VBZ the_DT printf_NN function_NN ._. •_'' HelloWorld_NNP .h_NNP —_NNP The_DT header_NN file_NN that_IN you_PRP generated_VBD using_VBG javah_JJ ._. It_PRP includes_VBZ the_DT C/C++_NNP prototype_NN for_IN the_DT Java__NNP HelloWorld_print_NNP function_NN ._. 4_CD ._. 5_CD Compile_NNP the_DT C_NNP Source_NN and_CC Create_NNP a_DT Native_NNP Library_NNP Remember_VB that_IN when_WRB you_PRP created_VBD the_DT HelloWorld_NNP class_NN in_IN the_DT HelloWorld_NNP .java_NNP file_NN ,_, you_PRP included_VBD a_DT line_NN of_IN code_NN that_IN loaded_VBN a_DT native_JJ library_NN into_IN the_DT program_NN :_: System_NNP .loadLibrary_NNP (_-LRB- "_`` HelloWorld_NNP "_'' )_-RRB- ;_: Now_RB that_IN all_DT the_DT necessary_JJ C_NNP code_NN is_VBZ written_VBN ,_, you_PRP need_VBP to_TO compile_VB HelloWorld.c_NNP and_CC build_VB this_DT native_JJ library_NN ._. Different_JJ operating_VBG systems_NNS support_VB different_JJ ways_NNS to_TO build_VB native_JJ libraries_NNS ._. Following_VBG command_NN builds_VBZ a_DT dynamic_JJ link_NN library_NN (_-LRB- DLL_NNP )_-RRB- HelloWorld_NNP .dll_NN using_VBG the_DT Microsoft_NNP Visual_NNP C++_NNP compiler_NN :_: cl_NN -Ic_JJ :\java\include_NN -Ic_JJ :\java\include\win32_CD -MD_JJ -LD_NN HelloWorld.c_NNP -FeHelloWorld_NNP .dll_NN 4.6_CD Run_NNP the_DT Program_NNP International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 134_CD At_IN this_DT point_NN ,_, you_PRP have_VBP the_DT two_CD components_NNS ready_JJ to_TO run_VB the_DT program_NN ._. The_DT class_NN file_NN (_-LRB- HelloWorld.class_NNP )_-RRB- calls_VBZ a_DT native_JJ method_NN ,_, and_CC the_DT native_JJ library_NN (_-LRB- Hello-World_NNP .dll_NN )_-RRB- implements_VBZ the_DT native_JJ method_NN ._. Because_IN the_DT HelloWorld_NNP class_NN contains_VBZ its_PRP$ own_JJ main_JJ method_NN ,_, java_NNP HelloWorld_NNP You_PRP should_MD see_VB the_DT following_VBG output_NN :_: Hello_UH World_NNP !_. It_PRP is_VBZ important_JJ to_TO set_VB your_PRP$ native_JJ library_NN path_NN correctly_RB for_IN your_PRP$ program_NN to_TO run_VB ._. The_DT native_JJ library_NN path_NN is_VBZ a_DT list_NN of_IN directories_NNS that_IN the_DT Java_NNP virtual_JJ machine_NN searches_NNS when_WRB loading_NN native_JJ libraries_NNS ._. 5_CD ._. RESULTS_NNP &_CC DISCUSSION_NNP The_DT aim_NN of_IN this_DT work_NN is_VBZ to_TO develop_VB software_NN that_WDT can_MD be_VB used_VBN to_TO wrap_VB existing_VBG legacy_NN code_NN in_IN C_NNP as_IN a_DT Java_NNP code_NN that_WDT calls_VBZ the_DT original_JJ code_NN through_IN the_DT Java_NNP Native_NNP Interface_NNP ._. AWGNL_NNP can_MD be_VB applied_VBN automatically_RB to_TO wrap_VB entire_JJ software_NN libraries_NNS thereby_RB saving_VBG time_NN and_CC substantially_RB reducing_VBG the_DT likelihood_NN of_IN introducing_VBG coding_JJ errors_NNS ._. AWGNL_NN is_VBZ based_VBN on_IN the_DT Java_NNP Native_NNP Interface_NNP (_-LRB- JNI_NN )_-RRB- [6]_NN ,_, which_WDT is_VBZ an_DT API_NN that_WDT allows_VBZ Java_NNP code_NN to_TO interact_VB with_IN code_NN written_VBN in_IN another_DT language_NN ._. The_DT wrapper_NN would_MD be_VB able_JJ to_TO provide_VB the_DT following_VBG functions:_NN -_: •_NN It_PRP has_VBZ an_DT internal_JJ code_NN editor_NN ,_, which_WDT provides_VBZ features_NNS like_IN load_NN ,_, save_VBP ,_, copy_VBP ,_, paste_VBP ,_, clear_JJ ,_, etc_FW ._. created_VBN using_VBG JTextArea_NN control_NN under_IN java_NNP swing_NN ._. •_RB Compilation_NNP and_CC Building_NNP of_IN dll_NN files_NNS uses_VBZ VC++_NNP compiler_NN ._. •_VBD Registration_NNP of_IN DLL_NNP using_VBG windows_NNS service_NN (_-LRB- REGSVR32_NN )_-RRB- •_NN Provides_VBZ automatic_JJ version_NN which_WDT accepts_VBZ simply_RB the_DT c_NN code_NN for_IN which_WDT java_NNP code_NN is_VBZ to_TO be_VB generated_VBN ._. Output_NN is_VBZ .h_JJ file_NN ,_, .dll_NNP file_NN ,_, register_NN .dll_NN file_NN ,_, java_NNP classes_NNS for_IN all_PDT the_DT functions_NNS ,_, compiled_VBN java_NN classes_NNS for_IN all_DT the_DT .java_NNP files_NNS ,_, and_CC a_DT java_JJ test_NN code_NN to_TO test_VB that_IN all_PDT the_DT functions_NNS are_VBP available_JJ in_IN java_NNP indeed_RB ._. •_JJ Provides_VBZ external_JJ code_NN editor_NN interface_NN ._. It_PRP provides_VBZ the_DT external_JJ editor_NN linkage_NN under_IN the_DT software_NN ._. User_NNP can_MD use_VB any_DT external_JJ editor_NN to_TO edit/manage_VB the_DT code_NN ._. Editors_NNPS like_IN VC++_NNP ,_, JCreator_NNP ,_, JEdit_NNP ,_, NetBeans_NNP ,_, etc_FW ._. can_MD be_VB linked_VBN ._. •_'' Process_NNP Builder_NNP interface_NN ._. This_DT is_VBZ an_DT interface_NN required_VBN to_TO call_VB all_DT the_DT external_JJ compilers_NNS ,_, builders_NNS ,_, linkers_NNS from_IN within_IN java_NN ._. Also_RB it_PRP is_VBZ needed_VBN to_TO capture_VB the_DT outputs_NNS of_IN all_PDT the_DT compilers_NNS ._. •_NN Execution_NNP time_NN comparison_NN ._. Time_NN obtained_VBN from_IN all_PDT the_DT previous_JJ three_CD modules_NNS are_VBP displayed_VBN at_IN once_RB with_IN different_JJ amounts_NNS of_IN inputs_NNS ._. (_-LRB- 5000_CD ,_, 10000_CD ,_, 50000_CD random_JJ values_NNS )_-RRB- ._. 5.1_CD Automatic_NNP Mode_NNP In_IN this_DT mode_NN the_DT existing_JJ java_NN code_NN gets_VBZ compiled_VBN ,_, the_DT header_NN file_NN gets_VBZ created_VBN and_CC DLL_NNP will_MD be_VB built_VBN ._. All_PDT the_DT procedure_NN in_IN manual_JJ module_NN will_MD be_VB done_VBN automatically_RB to_TO wrap_VB the_DT code_NN and_CC finally_RB java_NNP file_NN get_VBP executed_VBN ._. With_IN the_DT help_NN of_IN JNI_NNP native_JJ files_NNS which_WDT are_VBP written_VBN in_IN C_NNP will_MD get_VB executed_VBN in_IN Java_NNP environment_NN by_IN writing_VBG all_DT method_NN which_WDT we_PRP have_VBP described_VBN earlier_RBR in_IN section_NN 4.The_DT following_JJ steps_NNS user_NN has_VBZ to_TO do_VB instead_RB of_IN writing_VBG whole_JJ code_NN in_IN Java_NNP while_IN using_VBG automatic_JJ mode_NN ._. Figure_NN 3_CD shows_VBZ how_WRB C_NNP routines_NNS get_VBP wrap_NN into_IN java_NN code_NN ._. International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 135_CD •_NNS In_IN automatic_JJ mode_NN user_NN write_VBP the_DT C_NNP function_NN prototype_NN ,_, save_IN that_DT file_NN as_IN header_NN file_NN such_JJ as_IN “mynativeheader_NN .h”_NN ._. for_IN example_NN ,_, C_NNP prototype_NN for_IN summation_NN of_IN two_CD integers_NNS :_: int_NN sum_NN (_-LRB- int_NN ,_, int_NN )_-RRB- ;_: •_JJ Write_JJ C_NNP function_NN definition_NN in_IN edit_NN C_NNP module_NN ._. Save_VB the_DT file_NN and_CC compile_VB it_PRP ._. •_NNP Next_NNP wrap_NN the_DT C_NNP function_NN code_NN ._. We_PRP get_VBP the_DT java_NN code_NN automatically_RB with_IN wrapped_VBN routine_JJ of_IN C_NNP function_NN ._. Give_VB only_RB call_VB to_TO the_DT C_NNP function_NN in_IN java_NNP code_NN ,_, compile_VB it_PRP and_CC run_VB it_PRP ._. The_DT Automatic_NNP wrapper_NN for_IN java_NNP provides_VBZ interoperation_NN between_IN Java_NNP code_NN running_VBG on_IN a_DT Java_NNP Virtual_NNP Machine_NN and_CC code_NN written_VBN in_IN other_JJ programming_NN languages_NNS (_-LRB- e_NN .g._NNP ,_, C_NNP ,_, C++_NNP or_CC assembly_NN )_-RRB- ._. The_DT project_NN is_VBZ useful_JJ when_WRB existing_VBG libraries_NNS need_VBP to_TO be_VB integrated_VBN into_IN Java_NNP code_NN ,_, or_CC when_WRB portions_NNS of_IN the_DT code_NN are_VBP implemented_VBN in_IN other_JJ languages_NNS for_IN improved_VBN performance_NN ._. The_DT Java_NNP Native_NNP Interface_NNP is_VBZ extremely_RB flexible_JJ ,_, allowing_VBG Java_NNP methods_NNS to_TO invoke_VB native_JJ methods_NNS ._. However_RB ,_, this_DT flexibility_NN comes_VBZ at_IN the_DT expense_NN of_IN extra_JJ effort_NN for_IN the_DT native_JJ language_NN programmer_NN ,_, who_WP has_VBZ to_TO explicitly_RB specify_VB how_WRB to_TO connect_VB to_TO various_JJ Java_NNP objects_NNS ._. The_DT project_NN suggests_VBZ a_DT template-based_JJ framework_NN that_WDT relieves_VBZ the_DT native_JJ language_NN programmer_NN from_IN most_JJS of_IN this_DT burden_NN ._. In_IN particular_JJ ,_, the_DT proposed_VBN technique_NN provides_VBZ automatic_JJ selection_NN of_IN the_DT right_JJ functions_NNS to_TO access_NN Java_NNP objects_VBZ based_VBN on_IN their_PRP$ types_NNS ._. Figure_NN 3._VBD Automatic_NNP mode_NN during_IN Execution_NNP of_IN Java_NNP files_NNS with_IN wrap_NN code_NN 5.2_CD Benchmark_NNP Test_NNP between_IN C_NNP ,_, JNI_NNP ,_, Java_NNP International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 136_CD Programming_NN through_IN the_DT JNI_NNP lets_VBZ you_PRP use_VBP native_JJ methods_NNS to_TO do_VB many_JJ different_JJ operations_NNS ._. A_DT native_JJ method_NN can_MD :_: •_VB Utilize_NNP Java_NNP objects_NNS in_IN the_DT same_JJ way_NN that_IN a_DT Java_NNP method_NN uses_VBZ these_DT objects_NNS ._. •_NN Create_NNP Java_NNP objects_NNS ,_, including_VBG arrays_NNS and_CC strings_NNS ,_, and_CC then_RB inspect_VB and_CC use_VB these_DT objects_NNS to_TO perform_VB its_PRP$ tasks_NNS ._. •_NN Inspect_NNP and_CC use_VB objects_NNS created_VBN by_IN Java_NNP application_NN code_NN ._. •_'' Update_NNP Java_NNP objects_VBZ that_IN it_PRP created_VBD or_CC was_VBD passed_VBN to_TO it_PRP ,_, and_CC these_DT updated_VBN objects_NNS can_MD then_RB be_VB made_VBN available_JJ to_TO the_DT Java_NNP application_NN ._. Finally_RB ,_, native_JJ methods_NNS can_MD also_RB easily_RB call_VB already_RB existing_VBG Java_NNP methods_NNS ,_, capitalizing_VBG on_IN the_DT functionality_NN already_RB incorporated_VBN in_IN the_DT Java_NNP programming_NN framework_NN ._. In_IN these_DT ways_NNS ,_, both_CC the_DT native_JJ language_NN side_NN and_CC the_DT Java_NNP side_NN of_IN an_DT application_NN can_MD create_VB ,_, update_VB ,_, and_CC access_NN Java_NNP objects_NNS and_CC then_RB share_VB these_DT objects_NNS between_IN them_PRP ._. Figure_NN 4_CD shows_VBZ the_DT time_NN comparison_NN for_IN bubble_NN sort_NN by_IN using_VBG C_NNP ,_, JNI_NNP and_CC Java_NNP ._. The_DT following_VBG steps_NNS show_VBP how_WRB JNI_PRP is_VBZ more_RBR efficient_JJ than_IN Java_NNP ._. •_NNP User_NNP develops_VBZ C_NNP code_NN for_IN different_JJ search_NN algorithms_NNS ._. •_NN User_NNP develops_VBZ the_DT functions_NNS necessary_JJ for_IN generating_VBG large_JJ random_JJ input_NN for_IN sorting_VBG algorithms_NNS ._. •_NN Develop_NNP code_NN to_TO call_VB these_DT functions_NNS in_IN java_NN using_VBG JNI_NNP •_NNP Calculate_NNP execution_NN time_NN taken_VBN by_IN every_DT algorithm_NN ._. •_'' Display_NNP the_DT time_NN taken_VBN by_IN every_DT algorithm_NN for_IN the_DT same_JJ input_NN ._. •_'' Display_NNP the_DT time_NN taken_VBN by_IN the_DT same_JJ code_NN in_IN pure_JJ java_NN ._. •_'' Display_NNP a_DT graph_NN which_WDT represents_VBZ comparison_NN of_IN execution_NN time_NN in_IN JAVA_NNP ,_, C_NNP and_CC Wrapper_NNP Generator_NNP system_NN using_VBG JNI._NNP Figure_NNP 4_CD ._. Execution_NNP time_NN comparison_NN between_IN C_NNP ,_, JNI_NNP ,_, and_CC Java_NNP code_NN for_IN Bubble_NNP sort_RB International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 137_CD 6_CD ._. Conclusion_NNP Wrapper_NNP Generator_NNP allows_VBZ programmers_NNS to_TO take_VB advantage_NN of_IN the_DT power_NN of_IN the_DT Java_NNP platform_NN ,_, without_IN having_VBG to_TO abandon_VB their_PRP$ investments_NNS in_IN legacy_NN code_NN ._. It_PRP provides_VBZ a_DT fast_JJ and_CC convenient_JJ way_NN of_IN enabling_VBG legacy_JJ C_NNP routines_NNS to_TO be_VB called_VBN from_IN Java_NNP applications_NNS ._. It_PRP also_RB provides_VBZ functionality_NN to_TO deal_VB with_IN arrays_NNS of_IN structures_NNS ,_, and_CC provides_VBZ a_DT graphical_JJ user_NN interface_NN through_IN which_WDT users_NNS can_MD wrap_VB legacy_JJ C_NNP libraries_NNS ._. Even_RB conversion_NN of_IN complex_JJ data_NNS types_NNS from_IN Java_NNP to_TO JNI_NNP and_CC back_RB to_TO Java_NNP is_VBZ done_VBN automatically_RB using_VBG Wrapper_NNP Generator_NNP ._. It_PRP provides_VBZ the_DT best_JJS solution_NN to_TO the_DT legacy_JJ code_NN problem_NN ._. And_CC usually_RB it_PRP results_VBZ in_IN better_JJR performance_NN than_IN the_DT corresponding_JJ Java_NNP code_NN ._. The_DT Wrapper_NNP Generator_NNP will_MD also_RB be_VB extended_VBN in_IN the_DT future_NN to_TO permit_VB wrapped_VBN code_NN to_TO be_VB accessed_VBN as_IN a_DT Grid_NNP service_NN ._. This_DT will_MD involve_VB generating_VBG a_DT description_NN of_IN the_DT service_NN in_IN an_DT XML-based_JJ format_NN such_JJ as_IN Web_NNP Services_NNPS Description_NN Language_NN (_-LRB- WSDL)_NNP ,_, and_CC publishing_VBG the_DT service_NN in_IN a_DT UDDI_NNP and/or_CC Jini_NNP registry_NN ._. Acknowledgement_NN I_PRP wish_VBP to_TO express_VB my_PRP$ deepest_JJS gratitude_NN to_TO K.N.Honwadkar_NNP for_IN his_PRP$ excellent_JJ guidance_NN ,_, invaluable_JJ advices_NNS and_CC unflinching_JJ support_NN without_IN which_WDT this_DT manuscript_NN would_MD not_RB have_VB been_VBN materialized_VBN ._. I_PRP would_MD also_RB take_VB this_DT opportunity_NN to_TO extend_VB my_PRP$ regards_NNS to_TO my_PRP$ family_NN for_IN their_PRP$ support_NN and_CC inspiration_NN ._. References_NNS [1_. ]_NN D_NNP M_NNP Beazley_NNP ,_, “SWIG_NNP :_: An_DT Easy_NNP to_TO Use_VB Tool_NNP for_IN Integrating_NNP Scripting_NNP Languages_NNP with_IN C_NNP and_CC C++_NNP ,_, ”_NNP presented_VBD at_IN the_DT 4th_JJ Tcl/Tk_NNP Workshop_NNP ,_, Monterey_NNP ,_, California_NNP ,_, July_NNP 6-10_CD ,_, 1996_CD ._. [2_'' ]_SYM J_NNP E_NNP Moreira_NNP ,_, SP_NNP Midki®_NNP ,_, M_NNP Gupta_NNP ,_, P_NNP Atrigas_NNP ,_, P_NNP Wu_NNP ,_, and_CC G_NNP Almasi_NNP ,_, The_DT NINJA_NNP Project_NNP :_: Making_VBG Java_NNP Work_NNP for_IN High_NNP Performance_NNP Numerical_NNP Computing_NNP ,_, "_`` Comm_NNP ._. ACM_NNP ,_, Vol_NNP ._. 44_CD ,_, No._NN 10_CD ,_, pages_NNS 102,109_CD ,_, October_NNP 2001_CD ._. [3_'' ]_SYM K._NNP Pingali_NNP ,_, P._NNP Stodgily_NNP ,_, A_DT distributed_VBN System_NNP based_VBN on_IN Web_NNP Services_NNP for_IN Computational_NNP Science_NNP Simulations_NNP ,_, Procs_NNP ._. Of_IN the_DT 20th_JJ International_NNP Conference_NNP on_IN Supercomputing_NNP ,_, 2006_CD ,_, pp_RP ._. 297–306_CD ._. [4_'' ]_SYM M_NNP Baker_NNP ,_, B_NNP Carpenter_NNP ,_, G_NNP Fox_NNP ,_, SH_NNP Ko_NNP ,_, and_CC X-Y_NNP Li_NNP ,_, “mpiJava_NNP :_: A_DT Java_NNP Interface_NNP MPI.”_NNP Presented_NNP at_IN the_DT First_NNP UK_NNP Workshop_NNP on_IN Java_NNP for_IN High_NNP Performance_NNP Network_NNP Computing_NNP ,_, September_NNP 2002_CD ,_, http_RB ://www.npac.syr.edu/projects/pcrc/papers/mpiJava/mpiJava.pdf_IN [5_CD ]_SYM M_NNP Welsh_NNP and_CC D_NNP Culler_NNP ,_, “Jaguar_NNP :_: Enabling_NNP Efficient_NNP Communication_NNP and_CC I/O_NNP in_IN Java_NNP ,_, ”_NNP Concurrency_NNP :_: Practice_NNP and_CC Experience_NNP ,_, Vol_NNP ._. 12_CD ,_, No._NN 7_CD ,_, pages_NNS 519–538_CD ,_, May_NNP 2000_CD ._. [6_'' ]_SYM M_NNP Bubak_NNP ,_, D_NNP Kurzyniec_NNP ,_, P_NNP Luszczek_NNP ,_, and_CC V_NNP Sunderam_NNP ,_, “Creating_VBG Java_NNP to_TO Native_NNP Code_NNP Interfaces_NNS with_IN Janet_NNP ,_, ”_NNP Scienific_NNP Programming_NNP ,_, Vol_NNP ._. 9_CD ,_, pages_NNS 39–50_CD ,_, 2001_CD ._. [7_'' ]_SYM M._NNP Li_NNP ,_, ,_, M.S._NNP Shield_NNP ,_, O.F._NNP Rana_NNP and_CC D.W._NNP Walker_NNP ._. A_DT wrapper_NN generator_NN for_IN wrapping_VBG high_JJ performance_NN legacy_NN codes_NNS as_IN Java/CORBA_NNP components_NNS in_IN Proceedings_NNS of_IN the_DT IEEE/ACM_NNP Super_NNP Computing_NNP '00_VBZ ,_, Dellas_NNP ,_, USA_NNP (_-LRB- November_NNP 2000_CD )_-RRB- ._. [8_'' ]_SYM M._NNP Li_NNP ,_, O.F._NNP Rana_NNP and_CC D.W._NNP Walker_NNP ,_, Wrapping_NNP MPI-based_JJ legacy_NN codes_NNS as_IN Java/CORBA_NNP components_NNS ._. Future_NN Generation_NNP Computer_NNP Systems_NNPS (_-LRB- FGCS)_NN 182_CD (_-LRB- 2001_CD )_-RRB- ,_, pp_RP ._. 213–223_CD ._. International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 138_CD [9_IN ]_CD R_NN Gordon_NNP ,_, “Essential_JJ JNI_NNP :_: Java_NNP Native_NNP Interface”_NNP ,_, pub.Prentice_NN Hall_NNP PTR_NNP ,_, 1998_CD ._. ISBN_NNP 0-13-679895-0_CD ._. [10]_'' S._NNP Krishnan_NNP ,_, B._NNP Stearn_NNP ,_, K._NNP Bhatia_NNP ,_, K._NNP Baldridge_NNP ,_, W._NNP Li_NNP and_CC P._NNP Arzberger_NNP ,_, ,_, Opal_NNP :_: Simple_NNP Web_NNP Services_NNP Wrappers_NNP for_IN Scientific_NNP Applications_NNP ,_, Procs_NNP ._. ICWS’06_'' ,_, IEEE_NNP Computer_NNP Press_NNP ,_, 2006_CD ,_, pp_RP ._. 823_CD -_: 832_CD ._. [11]_IN T._NNP Glatard_NNP ,_, D._NNP Emsellem_NNP ,_, J._NNP Montagnat_NNP ,_, Generic_NNP Web_NNP Service_NNP Wrapper_NNP for_IN Efficient_NNP Embedding_NNP of_IN Legacy_NNP Codes_NNP in_IN Service-based_JJ Workflows_NNS ,_, Procs_NNP ._. GELA_NNP 2006_CD ,_, pp_RP ._. 44—53_CD ._. [12]_IN T._NNP Souder_NNP and_CC S._NNP Mancoridis_NNP ._. A_DT tool_NN for_IN securely_RB integrating_VBG legacy_NN systems_NNS into_IN a_DT distributed_VBN environment_NN in_IN Proceedings_NNS of_IN the_DT Sixth_NNP Working_NNP Conference_NNP on_IN Reverse_NN Engineering_NNP (_-LRB- 1999_CD )_-RRB- pp_RP ._. 47–55_CD ._. [13]_SYM Web_NNP Services_NNPS For_IN Grid-Enabled_JJ Problem-Solving_JJ Environments_NNS ,_, a_DT presentation_NN on_IN the_DT Access_NNP Grid_NNP on15_IN March_NNP 2002_CD ,_, http_RB ://www.cs_IN .cf.ac.uk/user/David_NNP .W.Walker/WebServicesPSEs.ppt_NNP on_IN slide_NN 50_CD [14]_CD Y_NNP ._. Huang_NNP et_NNP al_NN ._. ,_, ”Wrapping_VBG Legacy_NNP Codes_NNP for_IN Grid-Based_JJ Applications”_NNP ,_, in_IN Proceedings_NNS of_IN the_DT 17th_JJ International_NNP Parallel_NNP and_CC Distributed_NNP Processing_NNP Symposium_NNP (_-LRB- Workshop_NNP on_IN Java_NNP for_IN HPC_NNP )_-RRB- ,_, 22-26_CD April_NNP 2003_CD ,_, Nice_NNP ,_, France_NNP ._. ISBN_NNP 0-7695-1926-1_CD [15_CD ]_SYM Yan_NNP Huang_NNP and_CC Qifeng_NNP Huang_NNP ,_, “GSiB_NNP Visual_NNP Environment_NNP for_IN Web_NNP Service_NNP Composition_NNP and_CC Enactment_NNP ”_NNP Accepted_NNP as_IN a_DT poster_NN by_IN the_DT UK_NNP e-Science_NN Programme_NNP All_DT Hands_NNS Meeting_VBG 2005_CD ,_, held_VBN 19-_NNS 22_CD September_NNP 2005_CD in_IN Nottingham_NNP ,_, UK._NNP Authors_NNP K.N.Honwadkar_NNP is_VBZ working_VBG with_IN Department_NNP of_IN Computer_NNP Engineering_NNP ,_, D.Y.Patil_NNP College_NNP of_IN Engineering_NNP ,_, Akurdi_NNP ,_, Pune_NNP ,_, Maharashtra_NNP ,_, India_NNP ._. He_PRP is_VBZ Registered_VBN Research_NNP Scholar_NNP from_IN Swami_NNP Ramanand_NNP Teerth_NNP Marathwada_NNP University_NNP ,_, Nanded_NNP ,_, India_NNP ._. His_PRP$ and_CC research_NN interests_NNS include_VBP Network_NNP Security_NNP and_CC Human_NNP Computer_NNP Interface_NNP ._. He_PRP attended_VBD many_JJ conferences_NNS and_CC workshops_NNS and_CC published_VBN over_IN 25_CD papers_NNS at_IN National_NNP /_NNP International_NNP conferences_NNS ._. International_NNP Journal_NNP of_IN Computer_NNP Science_NNP and_CC Information_NNP Technology_NNP ,_, Volume_NN 2_CD ,_, Number_NN 2_CD ,_, April_NNP 2010_CD 139_CD V.S.Vairale_NNP is_VBZ working_VBG with_IN All_DT India_NNP Shri_NNP Shivaji_NNP Memorial_NNP Society’s_NNP College_NNP of_IN Engineering_NNP ,_, Pune_NNP ,_, Maharashtra_NNP ,_, India_NNP ._. She_PRP is_VBZ pursuing_VBG her_PRP$ ME_NNS (_-LRB- Computer_NN )_-RRB- degree_NN from_IN D.Y.Patil_JJ College_NNP of_IN Engineering_NNP ,_, Akurdi,Pune_NNP ._. Her_PRP$ Research_NN interests_NNS include_VBP System_NNP Programming_NNP ,_, Network_NNP Security_NNP ._. She_PRP attended_VBD many_JJ conferences_NNS and_CC workshops_NNS and_CC published_VBN papers_NNS ._.
